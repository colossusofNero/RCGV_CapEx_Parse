/**
 * Compatibility helper to use new arch events if available and fallback
 * to NativeEventEmitter or DeviceEventEmitter.
 *
 * Can be removed once we no longer need to support the old arch and use
 * the methods on NativeStripeSdkModule directly.
 */
import { EventSubscription } from 'react-native';
import type { EventEmitter } from 'react-native/Libraries/Types/CodegenTypes';
import { PaymentMethod } from './types';
import { UnsafeObject } from './specs/utils';
import { FinancialConnectionsEvent } from './types/FinancialConnections';
type Events = {
    onConfirmHandlerCallback: EventEmitter<{
        paymentMethod: UnsafeObject<PaymentMethod.Result>;
        shouldSavePaymentMethod: boolean;
    }>;
    onFinancialConnectionsEvent: EventEmitter<UnsafeObject<FinancialConnectionsEvent>>;
    onOrderTrackingCallback: EventEmitter<void>;
    onCustomerAdapterFetchPaymentMethodsCallback: EventEmitter<void>;
    onCustomerAdapterAttachPaymentMethodCallback: EventEmitter<{
        paymentMethodId: string;
    }>;
    onCustomerAdapterDetachPaymentMethodCallback: EventEmitter<{
        paymentMethodId: string;
    }>;
    onCustomerAdapterSetSelectedPaymentOptionCallback: EventEmitter<{
        paymentOption: string;
    }>;
    onCustomerAdapterFetchSelectedPaymentOptionCallback: EventEmitter<void>;
    onCustomerAdapterSetupIntentClientSecretForCustomerAttachCallback: EventEmitter<void>;
    embeddedPaymentElementDidUpdateHeight: EventEmitter<UnsafeObject<any>>;
    embeddedPaymentElementWillPresent: EventEmitter<void>;
    embeddedPaymentElementDidUpdatePaymentOption: EventEmitter<UnsafeObject<any>>;
    embeddedPaymentElementFormSheetConfirmComplete: EventEmitter<UnsafeObject<any>>;
    embeddedPaymentElementRowSelectionImmediateAction: EventEmitter<void>;
    embeddedPaymentElementLoadingFailed: EventEmitter<UnsafeObject<any>>;
    onCustomPaymentMethodConfirmHandlerCallback: EventEmitter<UnsafeObject<any>>;
};
export declare function addListener<EventT extends keyof Events>(event: EventT, handler: Parameters<Events[EventT]>[0]): EventSubscription;
export {};
//# sourceMappingURL=events.d.ts.map