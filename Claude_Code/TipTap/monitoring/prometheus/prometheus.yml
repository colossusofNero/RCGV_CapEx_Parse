# Prometheus configuration for TipTap production monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'tiptap-production'
    environment: 'production'

rule_files:
  - "rules/*.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # Node Exporter - System metrics
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'tiptap-server'

  # cAdvisor - Container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    metrics_path: /metrics
    scrape_interval: 30s

  # PostgreSQL Exporter
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']

  # Redis Exporter
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']

  # PushGateway - Mobile app metrics
  - job_name: 'pushgateway'
    static_configs:
      - targets: ['pushgateway:9091']
    scrape_interval: 10s
    honor_labels: true

  # Blackbox Exporter - External service monitoring
  - job_name: 'blackbox-http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - https://api.tiptap.com/health
          - https://tiptap.com
          - https://app.tiptap.com
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  # Custom TipTap API metrics
  - job_name: 'tiptap-api'
    static_configs:
      - targets: ['tiptap-api:8080']
    metrics_path: /metrics
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'tiptap-api'

  # Payment Gateway metrics
  - job_name: 'payment-gateway'
    static_configs:
      - targets: ['payment-gateway:8081']
    metrics_path: /metrics
    scrape_interval: 15s

  # Fraud Detection Service metrics
  - job_name: 'fraud-detection'
    static_configs:
      - targets: ['fraud-detection:8082']
    metrics_path: /metrics
    scrape_interval: 30s

  # NFC Service metrics
  - job_name: 'nfc-service'
    static_configs:
      - targets: ['nfc-service:8083']
    metrics_path: /metrics
    scrape_interval: 15s

  # Authentication Service metrics
  - job_name: 'auth-service'
    static_configs:
      - targets: ['auth-service:8084']
    metrics_path: /metrics
    scrape_interval: 15s

  # Notification Service metrics
  - job_name: 'notification-service'
    static_configs:
      - targets: ['notification-service:8085']
    metrics_path: /metrics
    scrape_interval: 30s

  # Kubernetes pods (if running on Kubernetes)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # AWS CloudWatch metrics (if using AWS)
  - job_name: 'cloudwatch'
    ec2_sd_configs:
      - region: us-east-1
        port: 9100
    relabel_configs:
      - source_labels: [__meta_ec2_tag_Name]
        target_label: instance
      - source_labels: [__meta_ec2_instance_id]
        target_label: instance_id

# Recording rules for performance optimization
recording_rules:
  - name: tiptap_recording_rules
    rules:
      # Payment success rate by method
      - record: tiptap:payment_success_rate:5m
        expr: |
          sum(rate(payment_success_total[5m])) by (payment_method) /
          sum(rate(payment_attempts_total[5m])) by (payment_method)

      # Overall payment success rate
      - record: tiptap:payment_success_rate_overall:5m
        expr: |
          sum(rate(payment_success_total[5m])) /
          sum(rate(payment_attempts_total[5m]))

      # Transaction rate per second
      - record: tiptap:transaction_rate:5m
        expr: sum(rate(transaction_count_total[5m]))

      # Average transaction amount
      - record: tiptap:avg_transaction_amount:5m
        expr: |
          sum(rate(tip_amount_total[5m])) /
          sum(rate(transaction_count_total[5m]))

      # API error rate
      - record: tiptap:api_error_rate:5m
        expr: |
          sum(rate(http_requests_total{status=~"5.."}[5m])) /
          sum(rate(http_requests_total[5m]))

      # Active users per hour
      - record: tiptap:active_users:1h
        expr: count(count by (user_id) (increase(user_activity_total[1h])))

      # 95th percentile response time
      - record: tiptap:response_time_p95:5m
        expr: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (le, endpoint)
          )

      # Database connection pool usage
      - record: tiptap:db_connection_usage:5m
        expr: |
          (db_connections_active / db_connections_max) * 100

      # Memory usage percentage
      - record: tiptap:memory_usage_percent:5m
        expr: |
          (memory_used_bytes / memory_total_bytes) * 100

      # CPU usage percentage (5-minute average)
      - record: tiptap:cpu_usage_percent:5m
        expr: |
          100 - (avg(irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)

# Configuration for remote write (if using external time series database)
remote_write:
  - url: "https://prometheus.tiptap.com/api/v1/write"
    basic_auth:
      username: "prometheus"
      password: "${PROMETHEUS_REMOTE_WRITE_PASSWORD}"
    queue_config:
      max_samples_per_send: 1000
      max_shards: 200
      capacity: 2500

# Configuration for remote read (if needed)
remote_read:
  - url: "https://prometheus.tiptap.com/api/v1/read"
    basic_auth:
      username: "prometheus"
      password: "${PROMETHEUS_REMOTE_READ_PASSWORD}"